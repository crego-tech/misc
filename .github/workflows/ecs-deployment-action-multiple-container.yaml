---
name: "ECS Deployment Action"

on:
  workflow_call:
    inputs:
      env_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      ecs_cluster:
        required: true
        type: string
      ecr_repositories:
        required: true
        type: string
      task_family:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      dockerfile_paths:
        required: true
        type: string
      container_names:
        required: true
        type: string
      secret_config_key:
        required: true
        type: string
      internal_service_host:
        required: true
        type: string

jobs:
  run:
    runs-on: "ubuntu-latest"
    environment: ${{ inputs.env_name }}
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Checkout misc repo
        uses: actions/checkout@v2
        with:
          repository: crego-tech/misc
          path: ./misc
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IFS=',' read -ra ecr_repositories <<< "${{ inputs.ecr_repositories }}"
          IFS=',' read -ra dockerfile_paths <<< "${{ inputs.dockerfile_paths }}"
          IFS=',' read -ra container_names <<< "${{ inputs.container_names }}"

          ecr_images=""
          for (( i=0; i<${#ecr_repositories[@]}; i++ ))
          do
            echo "Element at index $i: ${ecr_repositories[$i]}"
            docker buildx build --file ${dockerfile_paths[$i]} --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max -t $ECR_REGISTRY/${ecr_repositories[$i]}:$IMAGE_TAG . --load
            docker push $ECR_REGISTRY/${ecr_repositories[$i]}:$IMAGE_TAG

            if [ -z "$ecr_images" ]; then
              ecr_images="$ECR_REGISTRY/${ecr_repositories[$i]}:$IMAGE_TAG"
            else
              ecr_images="$ecr_images,$ECR_REGISTRY/${ecr_repositories[$i]}:$IMAGE_TAG"
            fi
          done
          echo "ecr_images=$ecr_images" >> $GITHUB_OUTPUT
        shell: bash

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.task_family }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        run: python ./misc/ecs_task_def_json.py task-definition.json ${{ inputs.container_names }} ${{ steps.build-image.outputs.ecr_images }}
        env:
          TASK_ENVS: '[{"SERVICE_ENV": "${{ inputs.env_name }}"}, {"AWS_REGION": "${{ inputs.aws_region }}"}, {"SECRET_CONFIG_KEY": "${{ inputs.secret_config_key }}"}, {"INTERNAL_SERVICE_HOST": "${{ inputs.internal_service_host }}"}]'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ inputs.ecs_service }}
          cluster: ${{ inputs.ecs_cluster }}
          wait-for-service-stability: true

      # - name: Create Sentry release
      #   uses: getsentry/action-release@v1
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_RELEASE_TOKEN }}
      #     SENTRY_ORG: ${{ inputs.sentry_org }}
      #     SENTRY_PROJECT: ${{ inputs.sentry_project }}
      #   with:
      #     environment: ${{ inputs.env_name }}
