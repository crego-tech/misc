---
name: "ECS Deployment Action"

on:
  workflow_call:
    inputs:
      env_name:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      ecs_cluster:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      task_family:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      container_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string

    secrets:
      assume_role_arn:
        required: true

jobs:
  run:
    runs-on: "ubuntu-latest"
    environment: ${{ inputs.env_name }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Configure AWS Credentials via OIDC"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::563577067739:role/Github-crego-omni-assume-role
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --file ${{ inputs.dockerfile_path }} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            -t $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG . --load

          docker push $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ inputs.task_family }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.container_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ecs_service }}
          cluster: ${{ inputs.ecs_cluster }}
          wait-for-service-stability: true
